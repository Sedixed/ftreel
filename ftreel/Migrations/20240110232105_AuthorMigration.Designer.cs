// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ftreel.DATA;

#nullable disable

namespace ftreel.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240110232105_AuthorMigration")]
    partial class AuthorMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.Property<int>("FollowedCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("FollowersId")
                        .HasColumnType("int");

                    b.HasKey("FollowedCategoriesId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("CategoryUser");
                });

            modelBuilder.Entity("ftreel.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ftreel.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ftreel.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mail = "admin@ftreel.com",
                            Password = "AKRjO0sHxJ+hHoF+mtNh/B4LTNhEzgwkagvZM9YipudaUdj2eJXfBML3INTujC+MOQ==",
                            Roles = "ROLE_ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Mail = "user@ftreel.com",
                            Password = "ANToyYKRLBkL9g32xC9RhyAu7wiw9J8ppZYSNG1p0lCjqudAEsPUpE5UUSSu9jW77w==",
                            Roles = "ROLE_USER"
                        });
                });

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.HasOne("ftreel.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("FollowedCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ftreel.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ftreel.Entities.Category", b =>
                {
                    b.HasOne("ftreel.Entities.Category", "ParentCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ftreel.Entities.Document", b =>
                {
                    b.HasOne("ftreel.Entities.User", "Author")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("ftreel.Entities.Category", "Category")
                        .WithMany("ChildrenDocuments")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ftreel.Entities.Category", b =>
                {
                    b.Navigation("ChildrenCategories");

                    b.Navigation("ChildrenDocuments");
                });

            modelBuilder.Entity("ftreel.Entities.User", b =>
                {
                    b.Navigation("CreatedDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
